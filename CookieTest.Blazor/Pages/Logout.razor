@page "/logout"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CookieTest.Blazor.Providers
@using System.Security.Claims

@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Logout</PageTitle>

<h1>Your claims</h1>

@if (claims == null)
{
    <p>Loading claims...</p>
}
else if (claims.Any())
{
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}
else
{
    <p>No claims found.</p>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

<button class="btn btn-primary" @onclick="LogoutAsync">Logout</button>

@code {
    private string? errorMessage;

    private IEnumerable<Claim>? claims;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        claims = authState.User.Claims;
    }

    private async Task LogoutAsync()
    {
        try
        {
            var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthProvider.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
